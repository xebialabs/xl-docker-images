#!/bin/bash

{%- set xl_version_split = xl_version.split(".") %}
{%- set xl_version_major_minor = xl_version_split[0] + "." + xl_version_split[1] %}
{%- set new_derby = product == "xl-deploy" and xl_version_major_minor|float() >= 22.0 %}
{%- set plugin_source_supported = xl_version_major_minor|float() > 10.3 %}

function pwgen {
  tr -cd '[:alnum:]' < /dev/urandom | fold -w$1 | head -n1
}

function check_eula {
  if [[ -z "$XL_LICENSE" && -z "$XL_NO_UNREGISTERED_LICENSE" && ! -f "${APP_HOME}/conf/{{ license_file }}" && "$XL_LICENSE_KIND" == "byol" ]]; then
      if [[  "$ACCEPT_EULA" != "Y" && "$ACCEPT_EULA" != "y" ]]; then
        echo "You must accept the End User License Agreement or provide your own license before this container can start."
        exit 1
      fi
  fi;
}

check_files_exist() {
    if ls $1 1> /dev/null 2>&1; then
        return 1
    else
        return 0
    fi
}

function copy_mq_driver {
  case ${XLD_TASK_QUEUE_DRIVER_CLASS_NAME} in
    *rabbitmq*)
      echo "Detected RabbitMQ configuration. Copying required drivers to the driver/mq folder."
      cp ${APP_ROOT}/mq-libs/rabbitmq-jms* ${APP_HOME}/driver/mq
      cp ${APP_ROOT}/mq-libs/amqp-client* ${APP_HOME}/driver/mq
      ;;
    *activemq*)
      echo "Detected ActiveMQ configuration. Copying required drivers to the driver/mq folder."
      cp ${APP_ROOT}/mq-libs/activemq* ${APP_HOME}/driver/mq
      ;;
    *)
      echo "MQ Provider could not be inferred from url '${XLD_TASK_QUEUE_DRIVER_CLASS_NAME}'"
      ;;
  esac
}

function copy_db_driver {
  case ${XL_DB_URL} in
    jdbc:h2:*)
      XL_DB_DRIVER="org.h2.Driver"
      {%- if is_slim %}
      echo "h2 jdbc driver is not provided by default in the classpath, please make sure you provide one. Please refer readme for more details"
      {%- else %}
      if check_files_exist "${APP_HOME}/driver/jdbc/h2*.jar"; then
        echo "Detected H2 configuration. Copying required drivers to the driver/jdbc folder."
        cp ${APP_ROOT}/db-libs/h2* ${APP_HOME}/driver/jdbc
      else
        echo "h2 jdbc driver is provided by default in the classpath"
      fi
      {%- endif %}
      ;;
    jdbc:derby:*)
      {% if new_derby != "true" %}
        XL_DB_DRIVER="org.apache.derby.jdbc.AutoloadedDriver"
      {% else %}
        XL_DB_DRIVER="org.apache.derby.iapi.jdbc.AutoloadedDriver"
      {% endif %}
      {%- if is_slim %}
      echo "derby jdbc driver is not provided by default in the classpath, please make sure you provide one. Please refer readme for more details"
      {%- else %}
      echo "derby jdbc driver is provided by default in the classpath"
      {%- endif %}
      ;;
    jdbc:oracle:*)
      XL_DB_DRIVER="oracle.jdbc.OracleDriver"
      echo "oracle jdbc driver is not provided by default in the classpath, please make sure you provide one. Please refer readme for more details"
      ;;
    jdbc:mysql:*)
      XL_DB_DRIVER="com.mysql.jdbc.Driver"
      {%- if is_slim %}
      echo "mysql jdbc driver is not provided by default in the classpath, please make sure you provide one. Please refer readme for more details"
      {%- else %}
      if check_files_exist "${APP_HOME}/driver/jdbc/mysql*.jar"; then
        echo "Detected Mysql configuration. Copying required drivers to the driver/jdbc folder."
        cp ${APP_ROOT}/db-libs/mysql* ${APP_HOME}/driver/jdbc
      fi
      {%- endif %}
      ;;
    jdbc:postgresql:*)
      XL_DB_DRIVER="org.postgresql.Driver"
      if check_files_exist "${APP_HOME}/driver/jdbc/postgresql*.jar"; then
        echo "Detected Postgresql configuration. Copying required drivers to the driver/jdbc folder."
        cp ${APP_ROOT}/db-libs/postgresql* ${APP_HOME}/driver/jdbc
      fi
      ;;
    jdbc:sqlserver:*)
      XL_DB_DRIVER="com.microsoft.sqlserver.jdbc.SQLServerDriver"
      {%- if is_slim %}
      echo "sqlserver jdbc driver is not provided by default in the classpath, please make sure you provide one. Please refer readme for more details"
      {%- else %}
      if check_files_exist "${APP_HOME}/driver/jdbc/mssql*.jar"; then
        echo "Detected SQLServer configuration. Copying required drivers to the driver/jdbc folder."
        cp ${APP_ROOT}/db-libs/mssql* ${APP_HOME}/driver/jdbc
      fi
      {%- endif %}
      ;;
    jdbc:db2:*)
      XL_DB_DRIVER="com.ibm.db2.jcc.DB2Driver"
      echo "db2 jdbc driver is not provided by default in the classpath, please make sure you provide one. Please refer readme for more details"
      ;;
    *)
        echo "Database type could not be inferred from url '${XL_REPO_DB_URL}', supported db types are 'derby', 'oracle', 'mysql', 'postgresql', 'sqlserver', 'db2'"
        exit 1
        ;;
  esac
}

function store_license {
  if [ -f "${APP_HOME}/conf/{{ license_file }}" ]; then
    echo "Pre-existing license found, not overwriting"
    return
  fi

  if [ -v XL_LICENSE ]; then
    echo "License has been explicitly provided in \${XL_LICENSE}. Using it"
    echo ${XL_LICENSE} > ${APP_HOME}/conf/{{ license_file }}
    return
  fi

  if [ $XL_LICENSE_KIND != "byol" ]; then
    echo "License kind '$XL_LICENSE_KIND' has been configured, not requesting trial license"
    return
  fi

  if [ ! -v XL_NO_UNREGISTERED_LICENSE ]; then
    echo "XL_NO_UNREGISTERED_LICENSE was not set. Requesting unregistered license"
    SERVER_PATH_PART=${XL_LICENSE_ENDPOINT:-{{ license_server }}}
    echo -e $(curl -X POST "${SERVER_PATH_PART}/api/unregistered/xl-deploy" | jq --raw-output .license) | base64 -di > ${APP_HOME}/conf/{{ license_file }}
    return
  fi
}

function escape_special_characters() {
    printf '%s\n' "$1" | sed -e 's/!/\\!/g' \
                              -e 's/%/\\%/g' \
                              -e 's/\^/\\^/g' \
                              -e 's/&/\\&/g' \
                              -e 's/\*/\\*/g' \
                              -e 's/(/\\(/g' \
                              -e 's/)/\\)/g' \
                              -e 's/-/\\-/g' \
                              -e 's/_/\\_/g' \
                              -e 's/=/\\=/g' \
                              -e 's/</\\</g' \
                              -e 's/>/\\>/g' \
                              -e 's/?/\\?/g' \
                              -e 's/#/\\#/g' \
                              -e 's/\$/\\$/g' \
                              -e 's/+/\\+/g' \
                              -e 's/\[/\\[/g' \
                              -e 's/\]/\\]/g' \
                              -e 's/{/\\{/g' \
                              -e 's/}/\\}/g'
}

function escape_special_characters_in_all_env_vars() {
    for env_var in "${!environment[@]}"; do
        environment[$env_var]=$(escape_special_characters "${environment[$env_var]}")
    done
}


function generate_product_conf {

    if [[ -z "$OVERRIDE_HOSTNAME" ]]; then
      HOSTNAME=$(hostname)
      if [[ ${USE_IP_AS_HOSTNAME,,} == "true" ]]; then
        HOSTNAME=$(hostname -i)
      fi
    else
      HOSTNAME=$OVERRIDE_HOSTNAME
    fi
    IP_ADDRESS=$(hostname -i)

    if [[ ${GENERATE_XL_CONFIG,,} != "true" ]]; then
      echo "Not generating {{file}} as GENERATE_XL_CONFIG != 'true'"
    elif [ -e ${APP_HOME}/default-conf/{{file}}.template ]; then
      echo "Generate configuration file {{ file }} from environment parameters"
      sed -e "s#\${XL_DB_DRIVER}#${XL_DB_DRIVER}#g" \
      {% for env in environment %}
          {{- "    -e \"s#\${"+env['key']+"}#${"+env['key']+"}#g\" \\" }}
      {% endfor -%}
          ${APP_HOME}/default-conf/{{ file }}.template > ${APP_HOME}/conf/{{ file }}
    fi
}

{% if plugin_source_supported %}
function set_plugin_source {
    PLUGIN_SOURCE_FLAG="-pluginSource=${PLUGIN_SOURCE}"
    echo "Configuring plugin source. Setting value to ${PLUGIN_SOURCE_FLAG}"
}
{% endif %}

{% include 'includes/' + product + '-run-script.j2' %}

check_eula
copy_db_driver
copy_mq_driver
store_license
escape_special_characters_in_all_env_vars
generate_product_conf
{% if plugin_source_supported %}set_plugin_source{% endif %}

# Start regular startup process
exec ${APP_HOME}/bin/run.sh "$@" {% if plugin_source_supported %} ${PLUGIN_SOURCE_FLAG} {% endif %}
