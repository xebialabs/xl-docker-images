# Copy default plugins
if [ -z "$(ls -A ${APP_HOME}/plugins)" ]; then
  echo "Empty ${APP_HOME}/plugins directory detected:"
fi

echo "... Copying default plugins from ${APP_HOME}/default-plugins to ${APP_HOME}/plugins when a plugin is missing"

cd ${APP_HOME}/default-plugins
for pluginrepo in *; do
  if [ -d ${APP_HOME}/default-plugins/$pluginrepo ]; then
    mkdir -p ${APP_HOME}/plugins/$pluginrepo
    cd ${APP_HOME}/default-plugins/$pluginrepo
    for pluginjar in *; do
      pluginbasename=${pluginjar%%-[0-9\.]*.jar}
      if [ -f ${APP_HOME}/plugins/*/$pluginbasename-[0-9\.]*.jar ]; then
        echo "... Not copying $pluginrepo/$pluginjar because a version of that plugin already exists in the plugins directory"
      else
        echo "... Copying $pluginrepo/$pluginjar to the plugins directory"
        cp -R ${APP_HOME}/default-plugins/$pluginrepo/$pluginjar ${APP_HOME}/plugins/$pluginrepo/
      fi
    done
  else
    cp -R ${APP_HOME}/default-plugins/$pluginrepo ${APP_HOME}/plugins/
  fi
done
cd ${APP_HOME}
echo "Done copying default plugins"

# Clean out of the box empty config file to generate template.
rm ${APP_HOME}/default-conf/{{ product }}.conf

# copy default configurations
echo "... Copying default configuration from ${APP_HOME}/default-conf"

cd ${APP_HOME}/default-conf
for f in *; do
  if [[ $f == *.template ]]; then
    continue
  fi
  if [ -f ${APP_HOME}/conf/$f ]; then
    echo "... Not copying $f because it already exists in the conf directory"
  else
    echo "... Copying $f to the conf directory"
    cp -R $f ${APP_HOME}/conf/
  fi
done
cd ${APP_HOME}
echo "Done copying default configurations"

if [[ -z "$SSL" ]]; then
  SSL=false
fi

if [[ -z "$APP_PORT" ]]; then
  APP_PORT={{ port }}
fi

if [[ -z "$APP_CONTEXT_ROOT" ]]; then
  APP_CONTEXT_ROOT="/"
fi

# Set up new installation
if [ ! -f "${APP_HOME}/conf/{{ boot_conf }}" ]; then
  echo "No ${APP_HOME}/conf/{{ boot_conf }} file detected:"

  if [ $# -eq 0 ]; then
    echo "No arguments passed to container:"
    echo "... Running default setup"

    if [ "${ADMIN_PASSWORD}" = "" ]; then
      ADMIN_PASSWORD=`pwgen 8`
      echo "... Generating admin password: ${ADMIN_PASSWORD}"
    fi

    if [ "${REPOSITORY_KEYSTORE}" = "" ]; then
      if [ "${REPOSITORY_KEYSTORE_PASSPHRASE}" = "" ]; then
        REPOSITORY_KEYSTORE_PASSPHRASE=`pwgen 16`
        echo "... Generating repository keystore passphrase: ${REPOSITORY_KEYSTORE_PASSPHRASE}"
      fi
      echo "... Generating repository keystore"
      keytool -genseckey -alias deployit-passsword-key -keyalg aes -keysize 128 -keypass "deployit" -keystore ${APP_HOME}/conf/repository-keystore.jceks -storetype jceks -storepass ${REPOSITORY_KEYSTORE_PASSPHRASE}
    else
      if [ "${REPOSITORY_KEYSTORE_PASSPHRASE}" = "" ]; then
        echo "REPOSITORY_KEYSTORE provided, without an accompanying passphrase. exiting..."
        exit 1
      fi
      echo "${REPOSITORY_KEYSTORE}" | base64 -d > ${APP_HOME}/conf/repository-keystore.jceks
    fi

    echo "... Generating {{ boot_conf }}"
    sed -e "s#\${ADMIN_PASSWORD}#${ADMIN_PASSWORD}#g" \
      -e "s#\${REPOSITORY_KEYSTORE_PASSPHRASE}#${REPOSITORY_KEYSTORE_PASSPHRASE}#g" \
      -e "s#\${SSL}#${SSL}#g" \
      -e "s#\${APP_PORT}#${APP_PORT}#g" \
      -e "s#\${APP_CONTEXT_ROOT}#${APP_CONTEXT_ROOT}#g" \
      ${APP_HOME}/default-conf/{{ boot_conf }}.template > ${APP_HOME}/conf/{{ boot_conf }}

    if [ -n "${SERVER_URL}" ]; then
      echo "Setting custom server URL: ${SERVER_URL}"
      echo -e "\nserver.url=${SERVER_URL}" | sed -e "s#\${APP_PORT}#${APP_PORT}#g" >> ${APP_HOME}/conf/{{ boot_conf }}
    fi

    if [ -n "$HTTP_SSL_KEYSTORE_PATH" ]; then
      echo "Setting SSL keystore path with HTTP_SSL_KEYSTORE_PATH property"
      echo -e "\nkeystore.path=${HTTP_SSL_KEYSTORE_PATH}" >> ${APP_HOME}/conf/{{ boot_conf }}
    fi
    if [ -n "$HTTP_SSL_KEYSTORE_PASSWORD" ]; then
      echo "Setting SSL keystore password with HTTP_SSL_KEYSTORE_PASSWORD property"
      echo -e "\nkeystore.password=${HTTP_SSL_KEYSTORE_PASSWORD}" >> ${APP_HOME}/conf/{{ boot_conf }}
    fi
    if [ -n "$HTTP_SSL_KEYSTORE_KEYPASSWORD" ]; then
      echo "Setting SSL keystore key password with HTTP_SSL_KEYSTORE_KEYPASSWORD property"
      echo -e "\nkeystore.keypassword=${HTTP_SSL_KEYSTORE_KEYPASSWORD}" >> ${APP_HOME}/conf/{{ boot_conf }}
    fi
    if [ -n "$HTTP_SSL_KEYSTORE_TYPE" ]; then
      echo "Setting SSL keystore type with HTTP_SSL_KEYSTORE_TYPE property"
      echo -e "\nkeystore.type=${HTTP_SSL_KEYSTORE_TYPE}" >> ${APP_HOME}/conf/{{ boot_conf }}
    fi

    echo "Done"
  fi
else
  echo "Found ${APP_HOME}/conf/{{ boot_conf }} file. Processing it for new properties"

  if [[ "${HTTP_SSL_KEYSTORE_PATH}" != "" ]]; then
    if ! grep -q keystore.path ${APP_HOME}/conf/{{ boot_conf }}; then
      echo "Updating keystore.path with HTTP_SSL_KEYSTORE_PATH property"
      {
        echo ""
        echo keystore.path=${HTTP_SSL_KEYSTORE_PATH}
      } >> ${APP_HOME}/conf/{{ boot_conf }}
    fi
  fi

  if [[ "${HTTP_SSL_KEYSTORE_PASSWORD}" != "" ]]; then
    if ! grep -q keystore.password ${APP_HOME}/conf/{{ boot_conf }}; then
      echo "Updating keystore.password with HTTP_SSL_KEYSTORE_PASSWORD property"
      {
        echo ""
        echo keystore.password=${HTTP_SSL_KEYSTORE_PASSWORD}
      } >> ${APP_HOME}/conf/{{ boot_conf }}
    fi
  fi

  if [[ "${HTTP_SSL_KEYSTORE_KEYPASSWORD}" != "" ]]; then
    if ! grep -q keystore.keypassword ${APP_HOME}/conf/{{ boot_conf }}; then
      echo "Updating keystore.keypassword with HTTP_SSL_KEYSTORE_KEYPASSWORD property"
      {
        echo ""
        echo keystore.keypassword=${HTTP_SSL_KEYSTORE_KEYPASSWORD}
      } >> ${APP_HOME}/conf/{{ boot_conf }}
    fi
  fi

  if [[ "${HTTP_SSL_KEYSTORE_TYPE}" != "" ]]; then
    if ! grep -q keystore.type ${APP_HOME}/conf/{{ boot_conf }}; then
      echo "Updating keystore.type with HTTP_SSL_KEYSTORE_TYPE property"
      {
        echo ""
        echo keystore.type=${HTTP_SSL_KEYSTORE_TYPE}
      } >> ${APP_HOME}/conf/{{ boot_conf }}
    fi
  fi

  echo "Updating http port, context root, and ssl properties"
  grep "http.port=" ${APP_HOME}/conf/{{ boot_conf }} && sed -i "s#http.port\=.*##" ${APP_HOME}/conf/{{ boot_conf }}
  grep "http.context.root=" ${APP_HOME}/conf/{{ boot_conf }} && sed -i "s#http.context.root\=.*##" ${APP_HOME}/conf/{{ boot_conf }}
  grep "ssl=" ${APP_HOME}/conf/{{ boot_conf }} && sed -i "s#ssl\=.*##" ${APP_HOME}/conf/{{ boot_conf }}
  {
    echo ""
    echo http.port=${APP_PORT}
    echo http.context.root=${APP_CONTEXT_ROOT}
    echo ssl=${SSL}
  } >> ${APP_HOME}/conf/{{ boot_conf }}

  sed -i '/^$/d' ${APP_HOME}/conf/{{ boot_conf }}
fi

# Fix OpenJDK SSL issue
case ${OS} in
  "debian")
    JAVA_CERT_PATH="/etc/ssl/certs/java"
    ;;
  "centos")
    JAVA_CERT_PATH="/etc/pki/ca-trust/extracted/java"
    ;;
  "rhel")
    JAVA_CERT_PATH="/etc/pki/ca-trust/extracted/java"
    ;;
  *)
    JAVA_CERT_PATH="/etc/ssl/certs/java"
    ;;
esac

if [[ ${GENERATE_XL_CONFIG,,} == "true" ]]; then
    sed "s#\${JAVA_CERT_PATH}#${JAVA_CERT_PATH}#g" ${APP_HOME}/default-conf/script.policy.template > ${APP_HOME}/conf/script.policy
fi
