# Copy default plugins
if [ -z "$(ls -A ${APP_HOME}/plugins)" ]; then
  echo "Empty ${APP_HOME}/plugins directory detected:"
fi
  
echo "... Copying default plugins from ${APP_HOME}/default-plugins to ${APP_HOME}/plugins when a plugin is missing"

cd ${APP_HOME}/default-plugins
for pluginjar in *; do
  pluginbasename=${pluginjar%%-[0-9\.]*.xldp}
  if [ -f ${APP_HOME}/plugins/$pluginbasename-[0-9\.]*.xldp ]; then
    echo "... Not copying $pluginjar because a version of that plugin already exists in the plugins directory"
  else
    echo "... Copying $pluginjar to the plugins directory"
    cp -R ${APP_HOME}/default-plugins/$pluginjar ${APP_HOME}/plugins/
  fi
done
cd ${APP_HOME}
echo "Done copying default plugins"


# copy default configurations
echo "... Copying default configuration from ${APP_HOME}/default-conf"

cd ${APP_HOME}/default-conf
for f in *; do
  if [[ $f == *.template ]]; then
    continue
  fi
  if [ -f ${APP_HOME}/conf/$f ] && [ "${FORCECOPY_DEFAULT_CONFIGS}" = "false" ]; then
    echo "... Not copying $f because it already exists in the conf directory"
  else
    echo "... Copying $f to the conf directory"
    cp -R $f ${APP_HOME}/conf/
  fi
done
cd ${APP_HOME}
echo "Done copying default configurations"

# Set up new installation
if [ ! -f "${APP_HOME}/conf/{{ boot_conf }}" ]; then
  echo "No ${APP_HOME}/conf/{{ boot_conf }} file detected:"

  if [ $# -eq 0 ] || [ $1 == "worker" ]; then
    echo "No arguments passed to container:"
    echo "... Running default setup"

    if [ "${ADMIN_PASSWORD}" = "" ]; then
      ADMIN_PASSWORD=`pwgen 8`
      echo "... Generating admin password: ${ADMIN_PASSWORD}"
    fi

    if [ "${REPOSITORY_KEYSTORE}" = "" ]; then
      if [ "${REPOSITORY_KEYSTORE_PASSPHRASE}" = "" ]; then
        REPOSITORY_KEYSTORE_PASSPHRASE=`pwgen 16`
        echo "... Generating repository keystore passphrase: ${REPOSITORY_KEYSTORE_PASSPHRASE}"
      fi
      echo "... Generating repository keystore"
      keytool -genseckey -alias deployit-passsword-key -keyalg aes -keysize 128 -keypass "deployit" -keystore ${APP_HOME}/conf/repository-keystore.jceks -storetype jceks -storepass ${REPOSITORY_KEYSTORE_PASSPHRASE}
    else
      if [ "${REPOSITORY_KEYSTORE_PASSPHRASE}" = "" ]; then
        echo "REPOSITORY_KEYSTORE provided, without an accompanying passphrase. exiting..."
        exit 1
      fi
      echo ${REPOSITORY_KEYSTORE} | base64 -d > ${APP_HOME}/conf/repository-keystore.jceks
    fi

    echo "... Generating {{ boot_conf }}"
    sed -e "s#\${ADMIN_PASSWORD}#${ADMIN_PASSWORD}#g" -e "s#\${REPOSITORY_KEYSTORE_PASSPHRASE}#${REPOSITORY_KEYSTORE_PASSPHRASE}#g" ${APP_HOME}/default-conf/{{ boot_conf }}.template > ${APP_HOME}/conf/{{ boot_conf }}

    echo "Done"
  fi
fi