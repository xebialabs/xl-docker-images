#!/bin/bash

function set_db_driver {
  XL_DB_DRIVER=""
  case $1 in
    jdbc:h2:*)
      XL_DB_DRIVER="org.h2.Driver"
      ;;
    jdbc:oracle:*)
      XL_DB_DRIVER="oracle.jdbc.OracleDriver"
      ;;
    jdbc:mysql:*)
      XL_DB_DRIVER="com.mysql.jdbc.Driver"
      ;;
    jdbc:postgresql:*)
      XL_DB_DRIVER="org.postgresql.Driver"
      ;;
    jdbc:sqlserver:*)
      XL_DB_DRIVER="com.microsoft.sqlserver.jdbc.SQLServerDriver"
      ;;
    jdbc:db2:*)
      XL_DB_DRIVER="com.ibm.db2.jcc.DB2Driver"
      ;;
  esac
  echo "Database driver class name for $1 is $XL_DB_DRIVER"
}

function updateFiles() {
 for f in *; do
   if [[ $f == $1 ]]; then
     sed -i 's,${'"$2"'},'"${3}"',g' $f
   fi
 done
}

function updateDeployConfigurationFiles() {
  echo "... Preparing deploy central configuration files"
  for f in *; do
    if [[ $f == deploy*.template ]]; then
      cp $f ${f:0:-9}
    fi
  done

  for ARGUMENT in $@
  do
    if [[ $ARGUMENT == *"="* ]]; then
     KEY=$(echo $ARGUMENT | cut -f1 -d=)
     VALUE=$(echo $ARGUMENT | cut -f2 -d=)
     updateFiles "deploy*.yaml" $KEY $VALUE

     if [[ $KEY == "XL_DB_URL" ]]; then
       set_db_driver $VALUE
       updateFiles "deploy*.yaml" "XL_DB_DRIVER" $XL_DB_DRIVER
     fi
    fi
  done
  echo "... Done preparing deploy central configuration files"

  echo "... Copying prepared deploy central configuration files to centralConfiguration directory"
  for f in *; do
    if [[ $f != deploy*.yaml ]]; then
      continue
    fi
    if [ -f ${APP_HOME}/centralConfiguration/$f ]; then
      echo "... Not copying $f because it already exists in the centralConfiguration directory"
    else
      echo "... Copying $f to the centralConfiguration directory"
      mv $f ${APP_HOME}/centralConfiguration/
    fi
  done
  echo "... Done copying prepared deploy central configuration files to centralConfiguration directory"

}

# setup central configuration files for a product
cd ${APP_HOME}/central-conf

if [[ $# > 0 ]]; then
  echo "... The arguments are $@"
  if [[ $1 == "deploy" ]]; then
    updateDeployConfigurationFiles $@
  fi
fi

{% include 'includes/' + product + '-run-script.j2' %}

# Start regular startup process
exec ${APP_HOME}/bin/run.sh ${FORCE_UPGRADE_FLAG} "$@"