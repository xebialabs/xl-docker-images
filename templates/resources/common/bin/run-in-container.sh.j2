#!/bin/bash

{%- set xl_version_splitted = xl_version.split(".") %}
{%- set xl_version_major_minor = xl_version_splitted[0] + "." + xl_version_splitted[1] %}
{%- set central_configuration_enabled = product == "xl-deploy" and xl_version_major_minor|float() >= 10.2 %}
{%- set new_derby = (product == "xl-deploy" or product == "central-configuration") and xl_version_major_minor|float() > 10.3 %}
{%- set plugin_source_supported = xl_version_major_minor|float() > 10.3 %}

function pwgen {
  tr -cd '[:alnum:]' < /dev/urandom | fold -w$1 | head -n1
}

function check_eula {
  if [[ -z "$XL_LICENSE" && -z "$XL_NO_UNREGISTERED_LICENSE" && ! -f "${APP_HOME}/conf/{{ license_file }}" && "$XL_LICENSE_KIND" == "byol" ]]; then
      if [[  "$ACCEPT_EULA" != "Y" && "$ACCEPT_EULA" != "y" ]]; then
        echo "You must accept the End User License Agreement or provide your own license before this container can start."
        exit 1
      fi
  fi;
}

function copy_mq_driver {
  case ${XLD_TASK_QUEUE_DRIVER_CLASS_NAME} in
    *rabbitmq*)
      echo "Detected RabbitMQ configuration. Copying required drivers to the lib folder."
      cp ${APP_ROOT}/mq-libs/rabbitmq-jms* ${APP_HOME}/lib
      cp ${APP_ROOT}/mq-libs/amqp-client* ${APP_HOME}/lib
      ;;
    *activemq*)
      echo "Detected ActiveMQ configuration. Copying required drivers to the lib folder."
      cp ${APP_ROOT}/mq-libs/activemq* ${APP_HOME}/lib
      ;;
    *)
      echo "MQ Provider could not be inferred from url '${XLD_TASK_QUEUE_DRIVER_CLASS_NAME}'"
      ;;
  esac
}

function copy_db_driver {
  echo "Copying a database driver"

  case ${XL_DB_URL} in
    jdbc:h2:*)
      cp ${APP_ROOT}/db-libs/h2* ${APP_HOME}/lib
      ;;
    jdbc:derby:*)
      echo "Derby jdbc driver is provided by default in the classpath"
      ;;
    jdbc:oracle:*)
      echo "oracle jdbc driver is not provided by default in the classpath, please make sure you provide one. Please refer readme for more details"
      ;;
    jdbc:mysql:*)
      cp ${APP_ROOT}/db-libs/mysql* ${APP_HOME}/lib
      ;;
    jdbc:postgresql:*)
      cp ${APP_ROOT}/db-libs/postgresql* ${APP_HOME}/lib
      ;;
    jdbc:sqlserver:*)
      cp ${APP_ROOT}/db-libs/mssql* ${APP_HOME}/lib
      ;;
    jdbc:db2:*)
      echo "db2 jdbc driver is not provided by default in the classpath, please make sure you provide one. Please refer readme for more details"
      ;;
    *)
        echo "Database type could not be inferred from url '${XL_REPO_DB_URL}', supported db types are 'h2', 'derby', 'oracle', 'mysql', 'postgresql', 'sqlserver', 'db2'"
        exit 1
        ;;
  esac
}

function set_db_driver {
  echo "Setting database driver classname"

  case ${XL_DB_URL} in
    jdbc:h2:*)
      XL_DB_DRIVER="org.h2.Driver"
      ;;
    jdbc:derby:*)
      {% if new_derby %}
        XL_DB_DRIVER="org.apache.derby.iapi.jdbc.AutoloadedDriver"
      {% else %}
        XL_DB_DRIVER="org.apache.derby.jdbc.AutoloadedDriver"
      {% endif %}
      ;;
    jdbc:oracle:*)
      XL_DB_DRIVER="oracle.jdbc.OracleDriver"
      ;;
    jdbc:mysql:*)
      XL_DB_DRIVER="com.mysql.jdbc.Driver"
      ;;
    jdbc:postgresql:*)
      XL_DB_DRIVER="org.postgresql.Driver"
      ;;
    jdbc:sqlserver:*)
      XL_DB_DRIVER="com.microsoft.sqlserver.jdbc.SQLServerDriver"
      ;;
    jdbc:db2:*)
      XL_DB_DRIVER="com.ibm.db2.jcc.DB2Driver"
      ;;
  esac
}

function store_license {
  if [ -f "${APP_HOME}/conf/{{ license_file }}" ]; then
    echo "Pre-existing license found, not overwriting"
    return
  fi

  if [ -v XL_LICENSE ]; then
    echo "License has been explicitly provided in \${XL_LICENSE}. Using it"
    echo ${XL_LICENSE} > ${APP_HOME}/conf/{{ license_file }}
    return
  fi

  if [ $XL_LICENSE_KIND != "byol" ]; then
    echo "License kind '$XL_LICENSE_KIND' has been configured, not requesting trial license"
    return
  fi


  if [ ! -v XL_NO_UNREGISTERED_LICENSE ]; then
    echo "XL_NO_UNREGISTERED_LICENSE was not set. Requesting unregistered license"
    SERVER_PATH_PART=${XL_LICENSE_ENDPOINT:-{{ license_server }}}
    echo -e $(curl -X POST "${SERVER_PATH_PART}/api/unregistered/{{ product }}" | jq --raw-output .license) | base64 -di > ${APP_HOME}/conf/{{ license_file }}
    return
  fi
}

# Generate node-specific {{ product }}.conf file
# The ${APP_HOME}/node-conf/{{ product }}.conf file provides node specific properties, which are then merged with the
# ${APP_HOME}/conf/{{ product }}.conf file by the xl-platform when the instance is started.
# The ${APP_HOME}/node-conf takes precedance over ${APP_HOME}/conf/{{ product }}.conf and this is specified in ${APP_HOME}/conf/{{ wrapper_conf }}
function generate_node_conf {
  {% if central_configuration_enabled != "true" %}
    echo "Re-generate node cluster configuration"
    HOSTNAME=$(hostname)
    if [[ ${USE_IP_AS_HOSTNAME,,} == "true" ]]; then
      HOSTNAME=$(hostname -i)
    fi
    IP_ADDRESS=$(hostname -i)
    {% for file in conf_files %}
      if [ -e ${APP_HOME}/node-conf/{{file}}.template ]; then
        sed -e "s#\${HOSTNAME_SUFFIX}#${HOSTNAME_SUFFIX}#g" \
            -e "s#\${HOSTNAME}#${HOSTNAME}#g" \
            -e "s#\${XL_NODE_NAME}#${IP_ADDRESS}#g" \
          ${APP_HOME}/node-conf/{{ file }}.template > ${APP_HOME}/node-conf/{{ file }}
      fi
    {% endfor %}
  {% endif %}
}

function generate_product_conf {
  {% if central_configuration_enabled or 'central-config' in product %}
    if [[ ${USE_IP_AS_HOSTNAME,,} == "true" ]]; then
        DNS_RESOLVER="inet-address"
    else
        DNS_RESOLVER="async-dns"
    fi

    if [ -z "$XL_DB_URL" ]; then
      echo "... Using default centralConfiguration/deploy-repository.yaml"
      return
    fi

    HOSTNAME=$(hostname)
    if [[ ${USE_IP_AS_HOSTNAME,,} == "true" ]]; then
      HOSTNAME=$(hostname -i)
    fi

    IP_ADDRESS=$(hostname -i)
    JMS_DRIVER_CLASS_NAME=${XLD_TASK_QUEUE_DRIVER_CLASS_NAME}
    if [[ ${XLD_TASK_QUEUE_DRIVER_CLASS_NAME,,} == "rabbitmq" ]]; then
      JMS_DRIVER_CLASS_NAME="com.rabbitmq.jms.admin.RMQConnectionFactory"
    elif [[ ${XLD_TASK_QUEUE_DRIVER_CLASS_NAME,,} == "activemq" ]]; then
      JMS_DRIVER_CLASS_NAME="org.apache.activemq.ActiveMQConnectionFactory"
    fi
    {% for file in central_config_files %}
      if [[ ${GENERATE_XL_CONFIG,,} != "true" ]]; then
        echo "Not generating {{file}} as GENERATE_XL_CONFIG != 'true'"
      elif [[ -e ${APP_HOME}/central-conf/{{file}}.template && ! -f "${APP_HOME}/centralConfiguration/{{ file }}" ]]; then
        echo "Generate configuration file {{ file }} from environment parameters"
        sed -e "s#\${XL_DB_DRIVER}#${XL_DB_DRIVER}#g" \
            -e "s#\${HOSTNAME_SUFFIX}#${HOSTNAME_SUFFIX}#g" \
            -e "s#\${DNS_RESOLVER}#${DNS_RESOLVER}#g" \
            -e "s#\${HOSTNAME}#${HOSTNAME}#g" \
            -e "s#\${XLD_TASK_QUEUE_DRIVER_CLASS_NAME}#${JMS_DRIVER_CLASS_NAME}#g" \
        {% for env in environment %}
            {{- "    -e \"s#\${"+env['key']+"}#${"+env['key']+"}#g\" \\" }}
        {% endfor -%}
            ${APP_HOME}/central-conf/{{ file }}.template > ${APP_HOME}/centralConfiguration/{{ file }}
      fi
    {% endfor %}
  {% else %}
    if [ -z "$XL_DB_URL" ]; then
      echo "... Using default conf/{{ product }}.conf"
      return
    fi

    {% for file in conf_files %}
      if [[ ${GENERATE_XL_CONFIG,,} != "true" ]]; then
        echo "Not generating {{file}} as GENERATE_XL_CONFIG != 'true'"
      elif [ -e ${APP_HOME}/default-conf/{{file}}.template ]; then
        echo "Generate configuration file {{ file }} from environment parameters"
        sed -e "s#\${XL_DB_DRIVER}#${XL_DB_DRIVER}#g" \
        {% for env in environment %}
            {{- "    -e \"s#\${"+env['key']+"}#${"+env['key']+"}#g\" \\" }}
        {% endfor -%}
            ${APP_HOME}/default-conf/{{ file }}.template > ${APP_HOME}/conf/{{ file }}
      fi
    {% endfor %}
  {% endif %}
}

function check_force_upgrade {
   FORCE_UPGRADE_FLAG=""
   if [[ ${FORCE_UPGRADE,,} == "true" ]] ; then
     echo "Force upgrade setting has been detected. In case of upgrade it will be performed in non-interactive mode. "
     FORCE_UPGRADE_FLAG="-force-upgrades"
   fi
}
{% if plugin_source_supported %}
function set_plugin_source {
    if [[ "$1" == "worker" ]]
    then
        PLUGIN_SOURCE_FLAG="-pluginSource=${PLUGIN_SOURCE}"
    else
        PLUGIN_SOURCE_FLAG="-plugin-source=${PLUGIN_SOURCE}"
    fi

    echo "Configuring plugin source. Setting value to ${PLUGIN_SOURCE_FLAG}"
}
{% endif %}

{% if 'xl-release' in product %}
function set_force_remove_missing_types {
    if [[ "${FORCE_REMOVE_MISSING_TYPES}" == "true" ]]
    then
        FORCE_REMOVE_MISSING_TYPES_FLAG="-force-remove-missing-types=true"
    fi
}
{% endif %}

{% include 'includes/' + product + '-run-script.j2' %}

set_db_driver

{% if 'central-config' not in product %}
    check_eula
    copy_db_driver
    copy_mq_driver
    store_license
{% endif %}

generate_product_conf
generate_node_conf
check_force_upgrade
{% if plugin_source_supported %}set_plugin_source $1{% endif %}
{% if 'xl-release' in product %}set_force_remove_missing_types{% endif %}

# Start regular startup process
exec ${APP_HOME}/bin/run.sh ${FORCE_UPGRADE_FLAG} "$@" {% if plugin_source_supported %} ${PLUGIN_SOURCE_FLAG} {% endif %} ${FORCE_REMOVE_MISSING_TYPES_FLAG}

