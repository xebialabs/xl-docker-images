#!/bin/bash

function pwgen {
  tr -cd '[:alnum:]' < /dev/urandom | fold -w$1 | head -n1
}

function check_eula {
  if [[ -z "$XL_LICENSE" && -z "$XL_NO_UNREGISTERED_LICENSE" && ! -f "${APP_HOME}/conf/{{ license_file }}" && "$XL_LICENSE_KIND" == "byol" ]]; then
      if [[  "$ACCEPT_EULA" != "Y" && "$ACCEPT_EULA" != "y" ]]; then
        echo "You must accept the End User License Agreement or provide your own license before this container can start."
        exit 1
      fi
  fi;
}

function copy_db_driver {
  case ${XL_DB_URL} in
    jdbc:h2:*)
      XL_DB_DRIVER="org.h2.Driver"
      cp ${APP_ROOT}/db-libs/h2* ${APP_HOME}/lib
      ;;
    jdbc:oracle:*)
      XL_DB_DRIVER="oracle.jdbc.OracleDriver"
      echo "oracle jdbc driver is not provided by default in the classpath, please make sure you provide one. Please refer readme for more details"
      ;;
    jdbc:mysql:*)
      XL_DB_DRIVER="com.mysql.jdbc.Driver"
      cp ${APP_ROOT}/db-libs/mysql* ${APP_HOME}/lib
      ;;
    jdbc:postgresql:*)
      XL_DB_DRIVER="org.postgresql.Driver"
      cp ${APP_ROOT}/db-libs/postgresql* ${APP_HOME}/lib
      ;;
    jdbc:sqlserver:*)
      XL_DB_DRIVER="com.microsoft.sqlserver.jdbc.SQLServerDriver"
      cp ${APP_ROOT}/db-libs/mssql* ${APP_HOME}/lib
      ;;
    jdbc:db2:*)
      XL_DB_DRIVER="com.ibm.db2.jcc.DB2Driver"
      echo "db2 jdbc driver is not provided by default in the classpath, please make sure you provide one. Please refer readme for more details"
      ;;
    *)
        echo "Database type could not be inferred from url '${XL_REPO_DB_URL}', supported db types are 'h2', 'oracle', 'mysql', 'postgresql', 'sqlserver', 'db2'"
        exit 1
        ;;
  esac
}

function store_license {
  if [ -f "${APP_HOME}/conf/{{ license_file }}" ]; then
    echo "Pre-existing license found, not overwriting"
    return
  fi

  if [ -v XL_LICENSE ]; then
    echo "License has been explicitly provided in \${XL_LICENSE}. Using it"
    echo ${XL_LICENSE} > ${APP_HOME}/conf/{{ license_file }}
    return
  fi

  if [ $XL_LICENSE_KIND != "byol" ]; then
    echo "License kind '$XL_LICENSE_KIND' has been configured, not requesting trial license"
    return
  fi


  if [ ! -v XL_NO_UNREGISTERED_LICENSE ]; then
    echo "XL_NO_UNREGISTERED_LICENSE was not set. Requesting unregistered license"
    SERVER_PATH_PART=${XL_LICENSE_ENDPOINT:-{{ license_server }}}
    echo -e $(curl -X POST "${SERVER_PATH_PART}/api/unregistered/{{ product }}" | jq --raw-output .license) | base64 -di >> ${APP_HOME}/conf/{{ license_file }}
    return
  fi
}

function generate_node_conf {
  echo "Re-generate node cluster configuration"
  HOSTNAME=$(hostname)
  IP_ADDRESS=$(hostname -i)
  {% for file in conf_files %}
    if [ -e ${APP_HOME}/node-conf/{{file}}.template ]; then
      sed -e "s#\${XL_DB_DRIVER}#${XL_DB_DRIVER}#g" \
          -e "s#\${HOSTNAME}#${HOSTNAME}#g" \
          -e "s#\${XL_NODE_NAME}#${IP_ADDRESS}#g" \
      {% for env in environment %}
          {{- "    -e \"s#\${"+env['key']+"}#${"+env['key']+"}#g\" \\" }}
      {% endfor -%}
          ${APP_HOME}/node-conf/{{ file }}.template > ${APP_HOME}/node-conf/{{ file }}
    fi
  {% endfor %}
}

function generate_product_conf {
  if [ -z "$XL_DB_URL" ]; then
    echo "... Using default conf/{{ product }}.conf"
    return
  fi

  {% for file in conf_files %}
    if [ -e ${APP_HOME}/default-conf/{{file}}.template ]; then
      echo "Generate configuration file {{ file }} from environment parameters"
      sed -e "s#\${XL_DB_DRIVER}#${XL_DB_DRIVER}#g" \
      {% for env in environment %}
          {{- "    -e \"s#\${"+env['key']+"}#${"+env['key']+"}#g\" \\" }}
      {% endfor -%}
          ${APP_HOME}/default-conf/{{ file }}.template > ${APP_HOME}/conf/{{ file }}
    fi
  {% endfor %}
}

function check_force_upgrade {
   FORCE_UPGRADE_FLAG=""
   if [[ ${FORCE_UPGRADE,,} == "true" ]] ; then
     echo "Force upgrade setting has been detected. In case of upgrade it will be performed in non-interactive mode. "
     FORCE_UPGRADE_FLAG="-force-upgrades"
   fi
}
{% include 'includes/' + product + '-run-script.j2' %}

check_eula
copy_db_driver
generate_product_conf
generate_node_conf
store_license
check_force_upgrade

# Start regular startup process
exec ${APP_HOME}/bin/run.sh ${FORCE_UPGRADE_FLAG} "$@"
