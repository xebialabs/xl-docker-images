"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[365],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=o,f=m["".concat(s,".").concat(c)]||m[c]||u[c]||r;return n?a.createElement(f,i(i({ref:t},d),{},{components:n})):a.createElement(f,i({ref:t},d))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6952:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],l={sidebar_position:2},s="Working with Volumes",p={unversionedId:"manual/volumes",id:"manual/volumes",isDocsHomePage:!1,title:"Working with Volumes",description:"This article lists the volumes that can be mounted for XL products and along with the reason to use them.",source:"@site/docs/manual/volumes.md",sourceDirName:"manual",slug:"/manual/volumes",permalink:"/xl-docker-images/docs/manual/volumes",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Environment variables",permalink:"/xl-docker-images/docs/manual/environment-variables"},next:{title:"Dockerfile customization",permalink:"/xl-docker-images/docs/manual/customisation"}},d=[{value:"XL Deploy",id:"xl-deploy",children:[],level:2},{value:"XL Release",id:"xl-release",children:[],level:2}],u={toc:d};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"working-with-volumes"},"Working with Volumes"),(0,r.kt)("p",null,"This article lists the volumes that can be mounted for XL products and along with the reason to use them."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," The folders you mount ",(0,r.kt)("em",{parentName:"p"},"must")," to be owned by user 10001. For example, if you want to mount directories under ",(0,r.kt)("inlineCode",{parentName:"p"},"~/XebiaLabs/")," folder, to change the ownership you can run ",(0,r.kt)("inlineCode",{parentName:"p"},"sudo chown -R 10001 ~/XebiaLabs/")," ."),(0,r.kt)("h2",{id:"xl-deploy"},"XL Deploy"),(0,r.kt)("p",null,"By default, the environment variable ",(0,r.kt)("inlineCode",{parentName:"p"},"APP_ROOT")," points to ",(0,r.kt)("inlineCode",{parentName:"p"},"/opt/xebialabs")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"APP_HOME")," points to ",(0,r.kt)("inlineCode",{parentName:"p"},"/${APP_ROOT}/xl-deploy-server"),". Typically, there is no need to change them."),(0,r.kt)("p",null,"The following locations can be mounted as volumes to provide either configuration data, and/or persistent storage for application data."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\\${APP_HOME}/conf")," - This directory contains the configuration files and keystores for XL Deploy. If mounted it is possible to configure (and inject) non-default configuration settings."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"xl-deploy.conf")," file is generated by the container startup script based on the environment variables set. To prevent this from happening, you can set the ",(0,r.kt)("inlineCode",{parentName:"li"},"GENERATE_XL_CONFIG")," environment variable to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),". Once the variable is set, the ",(0,r.kt)("inlineCode",{parentName:"li"},"xl-deploy.conf")," for the product will not be generated based on environment variables and you would have to provide this file yourself."),(0,r.kt)("li",{parentName:"ul"},"If you provide a file called ",(0,r.kt)("inlineCode",{parentName:"li"},"deployit.conf")," in the conf folder mounted, you need to provide the relevant values for the attributes in your file as shown below:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"admin.password=ADMIN_PASSWORD\nclient.automatically.map.all.deployables.on.initial=false\nclient.automatically.map.all.deployables.on.update=false\nclient.automatically.map.all.deployables=true\nclient.server_poll.delay=30000\nclient.session.remember.enabled=true\nclient.session.timeout.minutes=20\nhide.internals=false\nhttp.bind.address=0.0.0.0\nhttp.context.root=/\nhttp.port=4516\nhttp.upload.buffer=262144\nimportable.packages.path=importablePackages\nmaintenance.forbidden_paths=deployit/task\\:POST,deployit/tasks/v2\\:POST,deployit/control\\:POST,xldeploy/task\\:POST,xldeploy/tasks/v2\\:POST,xldeploy/control\\:POST\nrepository.keystore.password=admin\nserver.mapping.override.deployed.fields.on.update=true\nserver.resolve.application.dependencies=true\nssl.mutual=false\nssl=false\nthreads.max=150\nthreads.min=30\n"))),(0,r.kt)("li",{parentName:"ul"},"The configuration files mentioned below can also be overwritten by providing the relevant attribute values, in the mounted volume. A default will be used for any file not provided in the mounted volume.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deployit-security.xml")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"logback-access.xml")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"logback.xml")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"logging.properties")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wrapper-daemon.vm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xl-deploy.policy")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xld-wrapper-server.conf")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xld-wrapper-worker.conf")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xld-wrapper.conf.common")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xld-wrapper.conf.posix")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xld-wrapper.conf.win"))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\\${APP_HOME}/hotfix/lib")," - This directory contains the hotfixes for the libraries used by XL Deploy. When instructed by XebiaLabs support personnel, you should drop any delivered hotfixes in here."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\\${APP_HOME}/hotfix/plugins")," - This directory contains the hotfixes for the plugins used by XL Deploy. When instructed by XebiaLabs support personnel, you should drop any delivered plugin hotfixes in here."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\\${APP_HOME}/ext")," - This directory contains the developed (exploded plugins) for XL Deploy. You can customize an existing plugin here, for example you can modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"synthetic.xml")," for a specific plugin here."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\\${APP_HOME}/plugins")," - This directory contains the plugins that are running in XL Deploy. When mounted, plugins present in this directory will be loaded instead of bundled ones. If any base plugin is not provided, it will be loaded from default plugins. If you mount an empty directory, the default bundled plugins will be loaded. But it is recommended to use a custom image with required plugins to avoid issues during the upgrade process."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\\${APP_HOME}/repository")," - This directory contains the embedded repository database for XL Deploy. Using the configuration injected through the ",(0,r.kt)("inlineCode",{parentName:"p"},"${APP_HOME}/conf")," volume, it is possible to configure the used database to a remotely running database engine, instead of using the embedded memory based one. It is highly recommended not to use the embedded DB for production setup."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\\${APP_HOME}/export")," - This directory holds the exported CIs when using the CI export option in XL Deploy"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\\${APP_HOME}/work")," - This directory will be used to save task data, task recovery files, uploaded files and temp files in XL Deploy. The task recovery files can be used in cases on container restarts if mounted externally to recover tasks."),(0,r.kt)("p",null,"Here is an example of mounting volumes for XL Deploy with docker compose."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "2"\nservices:\n  xl-deploy:\n    image: xebialabs/xl-deploy:9.5.0\n    container_name: xl-deploy\n    ports:\n      - "4516:4516"\n    volumes:\n      - ~/XebiaLabs/xl-deploy-server/conf:/opt/xebialabs/xl-deploy-server/conf\n      - ~/XebiaLabs/xl-deploy-server/hotfix/lib:/opt/xebialabs/xl-deploy-server/hotfix/lib\n      - ~/XebiaLabs/xl-deploy-server/hotfix/plugins:/opt/xebialabs/xl-deploy-server/hotfix/plugins\n      - ~/XebiaLabs/xl-deploy-server/ext:/opt/xebialabs/xl-deploy-server/ext\n      - ~/XebiaLabs/xl-deploy-server/plugins:/opt/xebialabs/xl-deploy-server/plugins\n      - ~/XebiaLabs/xl-deploy-server/repository:/opt/xebialabs/xl-deploy-server/repository\n      - ~/XebiaLabs/xl-deploy-server/repository:/opt/xebialabs/xl-deploy-server/export\n      - ~/XebiaLabs/xl-deploy-server/repository:/opt/xebialabs/xl-deploy-server/work\n    environment:\n      - ADMIN_PASSWORD=admin\n      - GENERATE_XL_CONFIG=false\n      - ACCEPT_EULA=Y\n')),(0,r.kt)("h2",{id:"xl-release"},"XL Release"),(0,r.kt)("p",null,"By default, the environment variable ",(0,r.kt)("inlineCode",{parentName:"p"},"APP_ROOT")," points to ",(0,r.kt)("inlineCode",{parentName:"p"},"/opt/xebialabs")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"APP_HOME")," points to ",(0,r.kt)("inlineCode",{parentName:"p"},"/${APP_ROOT}/xl-release-server")," there is no need to change them usually."),(0,r.kt)("p",null,"The following locations can be mounted as volumes to provide either configuration data, and/or persistent storage for application data."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\\${APP_HOME}/conf")," - This directory contains the configuration files and keystores for XL Release. If mounted it is possible to configure (and inject) non-default configuration settings."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"xl-release.conf")," file and ",(0,r.kt)("inlineCode",{parentName:"p"},"script.policy")," are generated by the container startup script based on the environment variables set. To prevent this from happening, you can set the ",(0,r.kt)("inlineCode",{parentName:"p"},"GENERATE_XL_CONFIG")," environment variable to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". Once the variable is set, the ",(0,r.kt)("inlineCode",{parentName:"p"},"xl-release.conf")," for the product will not be generated based on environment variables and you would have to provide this file yourself.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you provide a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"xl-release-server.conf")," in the conf folder mounted, you need to provide relevant values for attributes in your file, as shown below:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"admin.password=admin\nclient.automatically.map.all.deployables.on.initial=false\nclient.automatically.map.all.deployables.on.update=false\nclient.automatically.map.all.deployables=true\nclient.server_poll.delay=30000\nclient.session.remember.enabled=true\nclient.session.timeout.minutes=20\nhide.internals=false\nhttp.bind.address=0.0.0.0\nhttp.context.root=/\nhttp.port=5516\nhttp.upload.buffer=262144\nimportable.packages.path=importablePackages\nmaintenance.forbidden_paths=deployit/task\\:POST,deployit/tasks/v2\\:POST,deployit/control\\:POST\nrepository.keystore.password=admin\nserver.mapping.override.deployed.fields.on.update=true\nserver.resolve.application.dependencies=true\nssl.mutual=false\nssl=false\nthreads.max=150\nthreads.min=30\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The below configuration files also can be overwritten by providing the same in the mounted volume. A default will be used for any file not provided in the mounted volume."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"logback-access.xml")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"logback.xml")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"logging.properties")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"wrapper-daemon.vm ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xl-release-security.xml")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xl-release.policy")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xlr-wrapper-linux.conf")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xlr-wrapper-win.conf"))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\\${APP_HOME}/hotfix")," - This directory contains the hotfixes for the libraries & plugins used by XL Release. When instructed by XebiaLabs support personnel, you should drop any delivered hotfixes in here."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\\${APP_HOME}/ext")," - This directory contains the developed (exploded plugins) for XL Release. You can customize an existing plugin here, for example you can modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"synthetic.xml")," for a specific plugin here."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\\${APP_HOME}/plugins")," - This directory contains the plugins that are running in XL Release. When mounted, plugins present in this directory will be loaded instead of bundled ones. If any base plugin is not provided it will be loaded from default plugins. If you mount an empty directory the default bundled plugins will be loaded. But it is recommended to use a custom image with required plugins to avoid issues during the upgrade process."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\\${APP_HOME}/repository")," - This directory contains the embedded repository database for XL Release. Using the configuration injected through the ",(0,r.kt)("inlineCode",{parentName:"p"},"${APP_HOME}/conf")," volume, it is possible to configure the used database to a remotely running database engine, instead of using the embedded memory base one. It is highly recommended not to use the embedded DB for production setup."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\\${APP_HOME}/archive")," - This directory contains the embedded archive database for XL Release. Using the configuration injected through the ",(0,r.kt)("inlineCode",{parentName:"p"},"${APP_HOME}/conf")," volume, it is possible to configure the used database to a remotely running database engine, instead of using the embedded memory base one. It is highly recommended not to use the embedded DB for production setup."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\\${APP_HOME}/reports")," - The report files generated from XL Release are stored in this folder."),(0,r.kt)("p",null,"Here is an example of mounting volumes for XL Release with docker compose."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "2"\nservices:\n  xl-release:\n    image: xebialabs/xl-release:9.5.0\n    container_name: xl-release\n    ports:\n      - "5516:5516"\n    links:\n      - xl-deploy\n    volumes:\n      - ~/XebiaLabs/xl-release-server/conf:/opt/xebialabs/xl-release-server/conf\n      - ~/XebiaLabs/xl-release-server/hotfix/:/opt/xebialabs/xl-release-server/hotfix/\n      - ~/XebiaLabs/xl-release-server/ext:/opt/xebialabs/xl-release-server/ext\n      - ~/XebiaLabs/xl-release-server/plugins:/opt/xebialabs/xl-release-server/plugins\n      - ~/XebiaLabs/xl-release-server/repository:/opt/xebialabs/xl-release-server/repository\n      - ~/XebiaLabs/xl-release-server/archive:/opt/xebialabs/xl-release-server/archive\n      - ~/XebiaLabs/xl-release-server/archive:/opt/xebialabs/xl-release-server/reports\n    environment:\n      - ADMIN_PASSWORD=admin\n      - GENERATE_XL_CONFIG=false\n      - ACCEPT_EULA=Y\n')))}m.isMDXComponent=!0}}]);