"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[101],{3905:function(e,t,o){o.d(t,{Zo:function(){return d},kt:function(){return m}});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var i=n.createContext({}),p=function(e){var t=n.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},d=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(o),m=r,h=c["".concat(i,".").concat(m)]||c[m]||u[m]||a;return o?n.createElement(h,l(l({ref:t},d),{},{components:o})):n.createElement(h,l({ref:t},d))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,l=new Array(a);l[0]=c;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<a;p++)l[p]=o[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}c.displayName="MDXCreateElement"},878:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return d},default:function(){return c}});var n=o(7462),r=o(3366),a=(o(7294),o(3905)),l=["components"],s={sidebar_position:1},i="XL Deploy active-active cluster setup with docker compose",p={unversionedId:"manual/xl-deploy-ha/README",id:"manual/xl-deploy-ha/README",isDocsHomePage:!1,title:"XL Deploy active-active cluster setup with docker compose",description:"The production setup for XL Deploy as mentioned here can be done using Docker compose as below.",source:"@site/docs/manual/xl-deploy-ha/README.md",sourceDirName:"manual/xl-deploy-ha",slug:"/manual/xl-deploy-ha/README",permalink:"/xl-docker-images/docs/manual/xl-deploy-ha/README",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Upgrade Single node deployment",permalink:"/xl-docker-images/docs/manual/upgrade-single-node-deployment"},next:{title:"Upgrade XL Deploy active-active cluster setup with docker compose",permalink:"/xl-docker-images/docs/manual/xl-deploy-ha/upgrade-multi-node-deployment"}},d=[{value:"setup",id:"setup",children:[],level:3},{value:"Limitations:",id:"limitations",children:[],level:3},{value:"Steps",id:"steps",children:[],level:3},{value:"Steps to use Digital.ai Deploy Task Engine as a worker",id:"steps-to-use-digitalai-deploy-task-engine-as-a-worker",children:[{value:"For Upgrade procedures please check this upgrade multi node deployment",id:"for-upgrade-procedures-please-check-this-upgrade-multi-node-deployment",children:[],level:4}],level:3}],u={toc:d};function c(e){var t=e.components,o=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"xl-deploy-active-active-cluster-setup-with-docker-compose"},"XL Deploy active-active cluster setup with docker compose"),(0,a.kt)("p",null,"The production setup for XL Deploy as mentioned ",(0,a.kt)("a",{parentName:"p",href:"https://docs.xebialabs.com/v.10.3/deploy/how-to/set-up-xl-deploy-in-production/"},"here")," can be done using Docker compose as below."),(0,a.kt)("p",null,"This article provides a sample approach you can follow to setup the database and other infrastructure of your choice."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note 1"),": For production deployments it is advised that you use Kubernetes to orchestrate the deployment of the applications. Docker compose is not ideal for production setup. Proceed at your own risk. Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"xl up")," command from the official XebiaLabs CLI to install XebiaLabs products using Kubernetes, for more details see ",(0,a.kt)("a",{parentName:"p",href:"https://docs.xebialabs.com/v.9.5/xl-deploy/concept/xl-up-manage-deployments"},"Manage Deployments with XL Up")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note 2"),": For HA setup to work, you need to mount a license file or provide an environment variable ",(0,a.kt)("inlineCode",{parentName:"p"},"XL_LICENSE")," with a license text converted to base64 for the XL Deploy instances"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note 3"),": The folders you mount needs to be owned by user 10001, for example, you can run ",(0,a.kt)("inlineCode",{parentName:"p"},"sudo chown -R 10001 xl-deploy-master")," if you are going to mount directories under ",(0,a.kt)("inlineCode",{parentName:"p"},"$PWD/xl-deploy-master")," folder."),(0,a.kt)("h3",{id:"setup"},"setup"),(0,a.kt)("p",null,"The setup includes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A load balancer with HaProxy"),(0,a.kt)("li",{parentName:"ul"},"RabbitMQ single node setup"),(0,a.kt)("li",{parentName:"ul"},"PostgreSQL database single node setup"),(0,a.kt)("li",{parentName:"ul"},"XL Deploy master nodes"),(0,a.kt)("li",{parentName:"ul"},"XL Deploy worker nodes")),(0,a.kt)("h3",{id:"limitations"},"Limitations:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You can have only 2 master nodes"),(0,a.kt)("li",{parentName:"ul"},"The database setup is for demo purposes, use your own setup or use external database"),(0,a.kt)("li",{parentName:"ul"},"The MQ setup is for demo purposes, use your own setup or use external MQ"),(0,a.kt)("li",{parentName:"ul"},"The HAproxy setup is for demo purposes, use your own setup")),(0,a.kt)("h3",{id:"steps"},"Steps"),(0,a.kt)("p",null,"Follow the below steps to deploy the sample"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Download the ",(0,a.kt)("inlineCode",{parentName:"li"},"docker-compose-xld-ha.yaml")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"docker-compose-xld-ha-workers.yaml")," files here"),(0,a.kt)("li",{parentName:"ol"},"You can use the provided ",(0,a.kt)("inlineCode",{parentName:"li"},"run.sh")," to bring up the setup or do it manually with below steps, change the passwords as required in either case.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Set passwords\nexport XLD_ADMIN_PASS=admin\nexport RABBITMQ_PASS=admin\nexport POSTGRES_PASS=admin\n\n# Create docker network\ndocker network create xld-network\n\n# deploy master nodes, load balancer, mq and database. You should not change the number of master nodes here, it must be 2\ndocker-compose -f docker-compose-xld-ha.yaml up --scale xl-deploy-master=2 -d\n\n# get the IP of master nodes, change the container names if you are not inside a folder named \"xl-deploy-ha\"\nexport XLD_MASTER_1=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' xl-deploy-ha_xl-deploy-master_1)\nexport XLD_MASTER_2=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' xl-deploy-ha_xl-deploy-master_2)\n\n# Deploy the worker nodes, you can change the number of nodes here if you wish\ndocker-compose -f docker-compose-xld-ha-workers.yaml up --scale xl-deploy-worker=2 -d\n\n# Print out the status\ndocker-compose -f docker-compose-xld-ha.yaml -f docker-compose-xld-ha-workers.yaml ps\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"You can view the logs of individual containers using the ",(0,a.kt)("inlineCode",{parentName:"li"},"docker logs <container_name> -f")," command."),(0,a.kt)("li",{parentName:"ol"},"You can access XL Deploy UI at http://localhost:8080"),(0,a.kt)("li",{parentName:"ol"},"To shutdown the setup you can run below")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Shutdown deployments\ndocker-compose -f docker-compose-xld-ha.yaml -f docker-compose-xld-ha-workers.yaml down\n# Remove network\ndocker network rm xld-network\n")),(0,a.kt)("h3",{id:"steps-to-use-digitalai-deploy-task-engine-as-a-worker"},"Steps to use Digital.ai Deploy Task Engine as a worker"),(0,a.kt)("p",null,"From 10.4 we split Deploy Task Engine to a separate distribution. So that running the task has only the code which\nis required for that, not the full version of Deploy. It has a less footprint what can give a great benefit in saving VM RAM."),(0,a.kt)("p",null,"Use shell scripts ",(0,a.kt)("inlineCode",{parentName:"p"},"slim-up.sh")," to bring the cluster up and ",(0,a.kt)("inlineCode",{parentName:"p"},"slim-down.sh")," to shut it down.\nThe difference in the configuration is quite subtle, ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose-xld-ha-slim-workers.yaml")," points to another image\nand has a bit different command. ",(0,a.kt)("inlineCode",{parentName:"p"},"worker")," argument is no more required. "),(0,a.kt)("h4",{id:"for-upgrade-procedures-please-check-this-upgrade-multi-node-deployment"},"For Upgrade procedures please check this ",(0,a.kt)("a",{parentName:"h4",href:"./upgrade-multi-node-deployment"},"upgrade multi node deployment")))}c.isMDXComponent=!0}}]);